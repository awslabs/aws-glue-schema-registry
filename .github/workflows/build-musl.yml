name: Build Musl

on:
  push:
    branches: [ master, native-schema-registry-release ]
  pull_request:
    branches: [ master, native-schema-registry-release ]
  release:
    branches: [ master, native-schema-registry-release ]
    types: [ created ]

jobs:
  build-musl:
    continue-on-error: false
    timeout-minutes: 90
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Set up Java for outer build
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: 'temurin'
      #     java-version: '21'
          
      # - name: Install Maven for outer build
      #   run: |
      #     curl -sSL https://downloads.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.tar.gz | tar xz
      #     sudo mv apache-maven-3.9.11 /opt/maven
      #     echo "MAVEN_HOME=/opt/maven" >> $GITHUB_ENV
      #     echo "/opt/maven/bin" >> $GITHUB_PATH
    
      # - name: Cache Maven packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2
          
      # - name: Build outer Java layer
      #   shell: bash
      #   run: |
      #     mvn -U clean install -Dcheckstyle.skip=true -DskipTests
        
      - name: Build GraalVM musl container
        run: |
          cd native-schema-registry/musl-build-helper-scripts/musl
          docker build -f Dockerfile.graalvm -t native-graalvm .
          
      - name: Build CMake musl container  
        run: |
          cd native-schema-registry/musl-build-helper-scripts/musl
          docker build -f Dockerfile.cmake -t native-cmake .

      - name: Clean previous builds
        run: |
          rm -rf native-schema-registry/c/build
          
      - name: Build Java components with musl
        run: |
          cd native-schema-registry/musl-build-helper-scripts/musl
          HOST_SOURCE_DIR="$(realpath ../../..)"
          SCRIPT_PATH="$(realpath ./build-musl-inner.sh)"
          CONTAINER_WORKDIR="/workspace"
          
          docker run --rm \
            --entrypoint /bin/sh \
            -v "$HOST_SOURCE_DIR":"$CONTAINER_WORKDIR" \
            -v "$SCRIPT_PATH":/tmp/musl-build-inner.sh \
            -w "$CONTAINER_WORKDIR" \
            "native-graalvm" \
            /tmp/musl-build-inner.sh

      - name: Build C components with musl
        run: |
          cd native-schema-registry/musl-build-helper-scripts/musl  
          HOST_SOURCE_DIR="$(realpath ../../..)"
          CMAKE_SCRIPT_PATH="$(realpath ./build-musl-cmake.sh)"
          CONTAINER_WORKDIR="/workspace"
          
          docker run --rm \
            -v "$HOST_SOURCE_DIR":"$CONTAINER_WORKDIR" \
            -v "$CMAKE_SCRIPT_PATH":/tmp/musl-build-cmake.sh \
            -w "$CONTAINER_WORKDIR" \
            "native-cmake" \
            /tmp/musl-build-cmake.sh

      - name: Build and Test C# with musl
        run: |
          docker run --rm \
            -v "$(pwd)":"$(pwd)" \
            -w "$(pwd)/native-schema-registry/csharp/AWSGsrSerDe" \
            mcr.microsoft.com/dotnet/sdk:8.0-alpine \
            sh -c "
              # First build - fails because protoc doesn't work with Alpine (musl libc based image)
              dotnet clean . && dotnet build . || true
              
              # Workaround because protoc from grpc.tools is not compatible with Alpine
              # This is only for the protoc compilation, and does not affect functionality of the library
              apk update && \
              apk --no-cache add libc6-compat && \
              apk --no-cache add \
              -X https://dl-cdn.alpinelinux.org/alpine/v3.17/main \
              -X https://dl-cdn.alpinelinux.org/alpine/v3.17/community \
              protobuf=3.21.9-r0 && \
              cd /root/.nuget/packages/grpc.tools/2.48.1/tools/linux_x64 && \
              rm protoc && \
              ln -s /usr/bin/protoc protoc && \
              chmod +x grpc_csharp_plugin
              
              # Need to build it twice due to protobuf compilation misorder (normal for csharp builds today)
              dotnet build .
              
              # Only run unit tests as a part of the workflow
              dotnet test . --filter 'JsonSerializerTest | AvroSerializerTest | JsonDeserializerTest | AvroDeserializerTest | (ProtobufSerializerTest&FullyQualifiedName!~KafkaFlow) | (ProtobufDeserializerTest&FullyQualifiedName!~KafkaFlow)' --no-build
            "

      # - name: Verify musl artifacts
      #   run: |
      #     echo "Checking for musl build artifacts..."
      #     find . -name "*.so" -o -name "*.a" -o -name "libglue_schema_registry*" | head -10 || echo "No shared libraries found yet"
          
      # - name: Fix permissions
      #   run: |
      #     # Fix ownership issues from Docker containers as mentioned in musl README
      #     sudo chown -R $(whoami):$(whoami) .
          
      # - name: Upload musl artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: musl-native-libraries
      #     path: |
      #       native-schema-registry/c/build/
      #       **/target/
      #       **/*.so
      #       **/*.a
      #     if-no-files-found: warn
      #     retention-days: 30

      # - name: Test musl artifacts
      #   run: |
      #     echo "Testing musl build artifacts..."
      #     # Basic verification that key files exist
      #     if [ -d "native-schema-registry/c/build" ]; then
      #       echo "✓ C build directory created"
      #       ls -la native-schema-registry/c/build/ || true
      #     else
      #       echo "✗ C build directory not found"
      #       exit 1
      #     fi
          
      #     # Check for native libraries
      #     echo "Looking for native libraries..."
      #     find . -name "*.so" -o -name "*.a" | head -5 || echo "No native libraries found"
